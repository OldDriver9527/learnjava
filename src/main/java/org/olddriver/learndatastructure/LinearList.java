package org.olddriver.learndatastructure;

/**
 * 20200826
 * part 1
 */
public class LinearList {
    /*
     * 线性表
     * 由n个数据元素a1,a2,...an组成的有限序列称为线性表。
     * n为表的长度；n=0时，将线性表称为空表；n>0时，记作(a1,a2,...,an)
     * 线性表中元素具有下标，表示元素在表中的位置
     * 相邻元素具有序偶关系
     * 表中仅有一个起始元素和一个终端元素；表中元素最多只有一个直接前趋，一个直接后继
     * 表中元素可以是简单类型，也可以是复杂类型。数据元素为复杂类型时，数据元素可由多个数据项组成，此时数据元素称为记录，
     * 含有大量记录的线性表称为文件
     *
     * 案例
     * 一元多项式运算
     * 使用顺序表存储单项式，单项式中包含系数，指数
     *
     * 线性表基本操作
     * InitList
     * DestoryList
     * ClearList
     * ListEmpty
     * ListLength
     * GetElem
     * LocateElem
     * PriorElem 获取当前元素前趋
     * NextElem 获取当前元素后继
     * ListInsert
     * ListDelete
     * ListTraverse 遍历
     *
     * 线性表的顺序存储结构(顺序表 Sequence List)
     * 使用一组连续存储空间存储线性表中元素，线性表中逻辑相邻的元素，物理上也相邻
     * 第一个元素的存储位置称为基地址
     * 若已知某个元素的存储位置，可以计算出其余元素的存储位置；通过下标可以访问任意位置元素，称为随机存取
     * 可使用一维数组存储元素，使用一变量记录表长的方式实现顺序表
     * 按值查找算法实现
     * 顺序查找，遍历表中元素，平均查找长度(ASL)等于查找第i个元素的概率乘以查找第i个元素需比较的次数最后求和，
     * 假设等概率查找每个元素，ASL = 1/n * 1 + 1/n * 2 + ... + 1/n * n = (n+1)/2
     * 插入算法实现
     * i.插入最后位置 直接将数据插入数组指定位置，最理想情况
     * ii.插入中间位置 从终端元素到插入位置元素后移一位，再插入元素，平均情况
     * iii.插入最前位置 从终端元素到起始元素后移一位，再插入元素，最坏情况
     * 删除算法实现
     * i.删除最后一个元素 直接将元素删除，最理想情况
     * ii.删除中间位置元素 将元素删除，删除元素后的所有元素前移一位，平均情况
     * iii.删除起始元素 将起始元素删除，其后所有元素前移，最坏情况
     *
     * 线性表链式存储结构(链表)
     * 链表由n个结点组成。结点称为数据元素的存储映像。每个结点都由数据域和指针域构成，数据域存放数据元素，指针域存放直接后继的地址
     * 链表使用任意一组存储单元存放表示数据元素的结点，元素的逻辑次序与物理次序不一定相同
     * 单链表 结点中仅有一个指针域
     * 双链表 结点中包含两个指针域
     * 循环链表 尾节点指针域存放头结点地址
     * 头指针 指向链表中第一个结点的指针
     * 首元结点 存放线性表中第一个元素的结点
     * 头结点 链表中第一个节点，附加在首元结点前
     * 空链表表示
     * 不带头结点的链表，头指针为null，表示空链表
     * 带头结点的链表，头结点的指针域为null，表示空链表
     * 头结点作用
     * 添加头结点，对首元结点的操作与其他结点一致
     * 链表访问元素必须从头指针开始，顺序访问每个结点，称为顺序存取
     */
}
