package org.olddriver.learnjava.designpattern.factory;

public class FactoryMethodAndAbstractFactory {
    /**
     * 工厂模式
     * 使用new创建对象，高层依赖低层细节，违反依赖倒置。通过调用工厂方法可以实现多态new
     * 工厂模式分为工厂方法模式，抽象工厂模式
     *
     * 简单工厂
     * 简单工厂模式不属于设计模式
     * 只有一个工厂，一个工厂创建多种产品。用户决定创建对象具体类型，如传入不同参数或调用不同方法。一般创建的对象都具有相同父类
     * 不符合开闭原则
     *
     * 工厂方法模式
     * 对简单工厂的变形。定义接口规定创建对象的规则，工厂类实现接口重写方法。一种工厂创建一种对象，新增对象不会修改已有代码。
     * 用户决定创建什么类型工厂实例化对象
     *
     * 抽象工厂模式
     * 用于创建一组产品。定义抽象类规定一组产品创建规则，工厂类继承抽象类重写一组方法，一种工厂创建一组产品。
     */
}
