package org.olddriver.learnjava.collections;

/**
 * 20210709
 * c语言 基础
 * 第一部分
 */
public class C {
    /**
     * c源程序到可执行文件经过预处理，编译，汇编，链接四步
     * gcc命令选项
     * E    对文件进行预处理
     * S    对文件进行预处理，编译
     * c    对文件进行预处理，编译，汇编
     * o    指定可执行文件位置
     *
     * c语言建议
     * 程序中变量应该先声明，再使用
     * 调用函数前需引入对应头文件
     *
     * 算法
     * 解决问题的方法，可以使用流程图描述
     *
     * 程序
     * 使用某种程序设计语言对算法的实现
     *
     * 注释
     * 单行注释 单行注释中能嵌套单行注释，多行注释
     * 多行注释 多行注释中只能嵌套单行注释，不能嵌套多行注释。多行注释可以使用#if 0 #endif命令代替
     *
     * 数据类型
     * c语言中数据类型包括基本数据类型，构造数据类型，指针类型，void类型
     *
     * 基本数据类型
     * 基本数据类型分为数值型，字符型，布尔型
     * 数值型包括整数型，浮点数型
     * 整数型
     * short  有符号短整型
     * unsinged short   无符号短整型
     * int  有符号整型
     * unsigned int 无符号整型
     * long 有符号长整型
     * unsigned long    无符号长整型
     * 整数型以二进制补码形式存储
     * 浮点数型
     * float    单精度浮点数
     * double   双精度浮点数
     * 浮点数型以二进制浮点数形数存储，包括符号位，指数位，有效数字位三部分
     * 二进制浮点数转十进制浮点数，先将指数位转换为十进制减指定值，然后有效数字位补全整数位，小数点向
     * 左或向右偏移，最后将二进制小数转为十进制
     * 字符型
     * char
     * char类型在内存中以asc编码的二进制补码形式存储
     * 布尔型
     * bool
     *
     * 隐式类型转换
     * 在运算过程中，编译器可能将高等级数据类型转换为低等级数据类型。也能将低等级数据类型转换为高等级数据类型
     * 显式类型转换
     * 手动将高等级数据类型转换为低等级数据类型
     *
     * 常量
     * 在程序执行过程中，常量值不允许发生变化
     * 常量分为字面常量，符号常量
     * 字面常量包括整数常量，浮点数常量，字符常量，字符串常量
     * 整数常量
     * 指所有常数，默认int类型。若类型后缀指定为L，显式指定为long类型
     * 浮点数常量
     * 指所有实数，默认double类型。若类型后缀指定为F，显式指定为float类型
     * 字符常量
     * 使用''标识的单个字符或转移字符
     * 字符串常量
     * 使用""标识的字符序列
     * 符号常量
     * 使用#define命令定义的宏
     * #define  宏名  宏体
     * 在预处理阶段，编译器会使用宏体替换宏名
     * 宏体中可以包含运算符，为了不影响表达式的运算顺序，需要将宏体及宏体中的内容使用()包裹
     * 宏体中可以定义语句体，语句体包含在()中，在语句体中定义多条语句，最后一条语句为表达式语句
     * 宏名中可以定义参数列表，在宏体中使用
     *
     * 变量
     * 在程序执行过程中，变量值允许修改
     * 变量声明语句
     * [存储类型]   数据类型    标识符 =   初始化值;
     * 存储类型分为auto，static，register，extern四类
     * auto     默认类型，自动分配内存空间，自动回收内存空间
     * static   静态类型，static修饰的变量在程序执行过程中不会销毁，仅初始化一次
     *          static可以修饰局部变量，全局变量，函数
     *          不使用static修饰的全局变量对所有源文件可见，使用static修饰的全局变量仅对当前文件可见
     *          不使用static修饰的函数对所有源文件可见，使用static修饰的函数仅对当前源文件可见
     * register 寄存器类型，建议编译器将变量存储在寄存器中，比较难实现
     * extern   外部类型，供其他源文件使用
     *
     * 表达式
     * 由算子和运算符构成，算子包括常量，变量，函数调用
     *
     * 语句
     * 由表达式构成，分为声明语句，流程控制语句，表达式语句
     *
     * 运算符
     * 算数运算符    + - * / % ++ --
     * /    除数不能为0
     * %    被模数，模数必须为整数
     * ++ --    涉及赋值操作，不适用于常量
     * 关系运算符
     * >    <   >=  <=  ==  !=
     * 运算结果为逻辑值0 or 1
     * 逻辑运算符
     * &&   ||  ！
     * 计算结果是逻辑值0 or 1
     * 操作数为0认为是false，非0认为true
     * 求字节运算符
     * sizeof
     * 条件运算符
     * expression?value0:value1;
     * 逗号运算符
     * 使用,连接多个表达式，整个表达式取最后一个表达式的值
     * 位运算符
     * <<   >>  >>> &   |   ^   ~
     * <<   二进制位向左移动指定位数，低位补0.左移几位乘以2的几次幂
     * >>   二进制位向右移动指定位数，高位补符号位，右移几位除以2的几次幂
     * >>>  二进制位向右移动指定位数，高位补0
     * &    左右操作数二进制进行&
     *      0 & x 都为0
     * |    左右操作数二进制进行|
     *      1 | x 都是1
     * ^    相同为假，不同为真
     * ~
     *
     * 输入输出
     * printf
     * 变参函数，将数据格式化后输出，返回值为成功输出的字符个数
     * 必须指定格式化字符串
     * 格式控制符语法 %[flags][width][.prec][length]type
     * type 类型
     * d    有符号十进制整数
     * u    无符号十进制整数
     * x    无符号十六进制整数
     * o    无符号八进制整数
     * f    小数形式浮点数
     * e    指数形式浮点数
     * g    ef中较短的
     * c    字符
     * s    字符串
     * p    指针
     * length   类型长度
     * h    hd表示short
     * l    ld表示long
     * ll   lld表示long long
     * scanf
     * 变参函数，接收输入数据，存入指针指向空间
     * 返回值为成功接收的数据项个数
     *
     * 流程控制语句
     * 分支结构
     * if语句
     * if(expression){
     *      statement;
     * }
     * if(expression){
     *      statement;
     * }else{
     *      statement;
     * }
     * if(expression){
     *     statement;
     * }else if(expression){
     *     statement;
     * }else{
     *     statement;
     * }
     * switch语句
     * switch(expression){
     *      case value0:statement;break;
     *      case value1:statement;break;
     *      default:statement;
     * }
     * 循环结构
     * while(expression){
     *      statement;
     * }
     * do{
     *     statement;
     * }while(expression);
     * for(initialization;expression;step){
     *      statement;
     * }
     *
     * 数组
     * 存储相同类型数据的容器，使用一组连续存储单元存储
     * 一维数组声明语句
     * 数组基本类型   数组名[一维数组长度] = 初始化值;
     * 数组基本类型表示一维数组中元素类型
     * 数组可以不初始化，部分初始化，全部初始化。全部初始化时不需指定一维数组长度
     * 一维数组数组名是一种特殊标识符，表示数组中首元素地址
     * &一维数组数组名表示整个数组地址，可以赋值给数组指针
     * *(&一维数组数组名)表示一维数组首元素地址，* &互为逆运算
     * 数组名[i]表示某个元素的值，等价于*(数组名+i)
     * 二维数组声明语句
     * 数组基本类型 数组名[第一维数组长度][第二维数组长度] = 初始化值;
     * 二维数组全部初始化时可省略第一维数组长度
     * 二维数组数组名表示第一行数组地址
     * &二维数组数组名表示二维数组地址
     * *二维数组数组名表示第一行数组中首元素地址
     * 二维数组数组名[i]表示某行数组首元素地址，等价于*(数组名+i)
     * &二维数组数组名[i]表示某行数组地址，等价于数组名+i
     * 字符数组声明语句
     * char 数组名 [数组长度] = 初始化值;
     * 字符数组可存储字符串
     *
     * 指针
     * 数据存储在存储器中，存储器中一个字节称为一个内存单元。每个内存单元都有一个编号，用于访问内存单元，该编号称为地址。
     * 存储地址的变量称为指针变量，简称指针
     * 间接访问运算符 *
     * *poniter 表示
     */
}
