package org.olddriver.learnjava.oo;

public class Inheritance {
    /**
     * 继承	Inheritance
	 * 在现有类的基础上派生出新类称为继承，是复用代码的一种方式
	 * 派生类称为子类，派生子类的类称为父类
	 * 子类会继承父类部分成员变量，成员方法，嵌套类？？？
	 * 子类继承父类，子类必定会继承父类public，protected成员；当子父类位于同一个包中，子类会继承父类中包访问权限的成员；
	 * 子类不会继承父类中private成员
	 *
	 * 类层次结构
	 * Object类是所有类的父类，定义类的通用行为；创建类时若不显式指明父类，默认继承Object类
	 * java中类支持单继承，不支持多继承，避免多个父类中成员变量冲突
	 *
	 * 子类中的操作
	 * 1.子类中能够直接调用继承自父类的成员变量
	 * 2.子类中能够再次定义父类中的成员变量，将父类中的成员变量隐藏，不推荐
	 * 子类中名称相同的成员变量即可隐藏父类成员变量，类型不必相同
	 * 3.子类中能够定义父类中不存在的成员变量
	 * 4.子类中能够直接调用继承自父类的成员方法
	 * 5.子类中能够再次定义父类中非static，非final成员方法，将父类方法覆盖
	 * 子类方法若想覆盖父类中方法，
	 * 子类方法方法签名要与父类方法保持一致，子类方法返回值类型可以是父类方法返回值类型的子类；
	 * 子类方法访问权限要大于等于父类方法访问权限；
	 * 子类方法的异常列表必须是父类方法异常列表的子类或子集；
	 * 子类方法上可以添加@Override注解,告知编译器
	 * 6.子类中能够再次定义父类中的static成员方法，将父类方法隐藏
	 * 子类方法若想隐藏父类中方法，子类方法方法签名及返回值类型要与父类方法一致
	 * 7.在子类中定义父类中不存在的成员方法
	 *
	 * 对象转型
	 * 子类对象由子类类型转型为父类类型，称为向上转型
	 * 子类对象由父类类型转型为子类类型，称为向下转型
	 * 向下转型前可以使用instanceof操作符进行判断，避免运行时异常
	 *
	 * super关键字
	 * 使用方式1：子类中使用super关键字访问父类中具有访问权限的成员
	 * 使用方式2：子类构造器中使用super关键字访问父类构造器进行父类初始化，super语句必须位于子类构造器第一行；
	 * 					  若子类构造器中未显式调用父类构造器，编译器会在子类构造器第一行插入super语句访问父类默认构造器
	 * 					  子类构造器中调用父类构造器会一直调用到Object类的构造器为止，称为构造器链
     */
}
