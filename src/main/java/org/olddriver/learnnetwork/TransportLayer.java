package org.olddriver.learnnetwork;

/**
 * 20210709
 * 传输层
 * 第三部分
 */
public class TransportLayer {
    /**
     * 传输层和网络层关系
     * 传输层提供不同主机上进程相互通信的服务
     * 网络层提供不同主机间相互通信的服务。网络层协议为ip协议(网际协议)
     *
     * 多路复用，多路分解
     * 将到达传输层的报文交付给正确的套接字工作称为多路分解
     * 传输层收集套接字输出的报文传递给网络层的工作称为多路复用
     * 端口号与套接字关联
     * udp协议根据报文段中目的端口号将报文段交付给正确套接字
     * tcp协议根据报文段中源端口，源ip，目标端口，目标ip将报文段交付给正确套接字
     *
     * udp协议
     * udp协议提供无连接不可靠数据传输服务，只能通过应用自身完善
     * 应用进程将报文传入udp套接字，传输层将报文封装成报文段，并立即将报文段传递到网络层
     *
     * 可靠数据传输(rdt)原理
     * 分组在传输过程中可能出现比特差错，丢包问题
     * 在分组中添加校验和，接收方响应肯定确定(ack)否定确定(nak)可防止分组比特差错。
     * 但引入新问题，ack，nak可能出现比特差错，此时发送方需要重传分组，会导致接收方存在冗余分组。为区分冗余分组，在分组中添加序号
     * 在此基础上使用ack加分组序号的方式取代nak，确认上一分组表示当前分组出错
     * 发送分组后启动倒计时计时器，防止丢包。当倒计时结束仍未收到ack，重传分组
     * 倒计时计时器超时时间过小，导致每个分组发送两次，虽能正常工作，但效率低
     *
     * 滑动窗口机制
     * 发送缓冲区
     * 发送缓冲区存储已确认，已发送未确认，即将发送，不能发送的分组
     * 发送窗口
     * 发送窗口为发送缓冲区的子集，指明不必等待确认可以直接发送的分组范围，可以包括已发送未确认，即将发送的分组
     * 接收到低序号确认后窗口移动
     * 接收缓冲区
     * 接收缓冲区存储已接收，准备接收，不准备接收的分组
     * 接收窗口
     * 接收窗口为接收缓冲区的子集，指明准备接收的分组范围
     * 接收到低序号分组后窗口移动
     * 接收窗口尺寸为1，只能按分组序号顺序接收分组，顺序确认分组；
     * 接收窗口尺寸大于1，可以不按分组序号乱序接收分组，乱序确认分组
     * 当发送窗口中分组数量为1，接收窗口中分组数量为1，此时滑动窗口协议为停等协议
     * 当发送窗口中分组数量大于1，接收窗口中分组数量为1，此时滑动窗口协议为回退n步协议
     * 当发送窗口中分组数量大于1，接收窗口中分组数量大于1，此时滑动窗口协议为选择重传协议
     * 回退n步协议采用累计确认，使用一个定时器，发送低序号分组时设置定时器
     * 选择重传协议采用非累计确认，每个分组一个定时器
     *
     * tcp协议    结合回退n步协议和选择重传协议
     * 序号
     * 报文段中载荷部分首字节在整个报文字节流中的编号
     * 确认号
     * 期望接收但还未接收的字节编号。tcp协议采用累计确认
     * 可靠数据传输
     * 采用一个定时器，发送低序号分组时设置定时器。超时重传只传一个低序号分组
     * 快速重传
     * 流量控制
     * 连接管理
     * 三次握手意义
     * 最少通过三次握手交换双方的初始分组序号并给予响应
     * 防止服务端为重传的连接建立请求建立连接，浪费不必要资源
     * ？？？？防止服务端接收上一次连接中的重发数据
     * 四次挥手
     * 双方各自通知对方拆除连接，并等待对方确认。若一方未收到确认不会拆除连接，并不完美
     * 当客户端猝不及防的请求服务端拆除连接，服务端可以立即发送确认分组。但如果此时服务端正向客户端发送数据，服务端不能
     * 立即发送拆除连接请求，四次挥手能合适
     * 拥塞控制
     *
     */
}
